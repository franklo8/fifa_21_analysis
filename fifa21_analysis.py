# -*- coding: utf-8 -*-
"""FIFA21_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m1NlsOyQXCKkP-QlJQsf-9b2MgIQh_GU
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
# %matplotlib inline
import seaborn as sns
sns.set_style("darkgrid")

fifa_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/FIFA 21 Analysis/fifa21 raw data v2.csv')
cols_to_use = ['ID', 'Name', 'LongName','Nationality','Age','Club','Height','Weight','Value','Preferred Foot','Skill','Positions','Sprint Speed','Shot Power','PAS','Dribbling','Defending','PHY']
fifa_df2 = fifa_df[cols_to_use]
fifa_df.head()

fifa_df.isna().sum()

#remove extra spaces in the club column
fifa_df['Club'] = fifa_df['Club'].str.strip()

fifa_df.info()

# prompt: in the height and weight columns, split the data into numbers and letters

# Extract numeric and unit parts from 'Height' and 'Weight' columns
fifa_df['Height_Value'] = fifa_df['Height'].str.extract('(\d+)').astype(float)

fifa_df['Weight_Value'] = fifa_df['Weight'].str.extract('(\d+)').astype(float)

fifa_df.drop('Height',axis=1,inplace=True)

fifa_df.drop('Weight',axis=1,inplace=True)

"""Split the fifa_df into sub df"""

#All countries
countries_df = fifa_df.drop_duplicates(subset='Nationality', keep='first')[['Nationality',]]
print('Total number of countries in FIFA21: {}'.format(countries_df.shape[0]))

#Players who are Goalkeepers
strickers_df = fifa_df[['Name','Positions','Nationality','Club','Total Stats','Base Stats']]
#Create a boolean mask indicating whether each player is a goalkeeper
is_goalkeeper = strickers_df['Positions'].str.contains('GK',case=False)
#Filter the DataFrame to include only goalkeepers
strickers_df = strickers_df[is_goalkeeper]
#Sort the DataFrame by the 'Positions' column in descending order
strickers_df = strickers_df.sort_values(by=['Positions'],ascending=False)
strickers_df

#Check how many players are from Nigeria
eng_players_df = fifa_df[fifa_df['Nationality']=='Nigeria']
print('Total number of players from Nigeria: {}'.format(eng_players_df.shape[0]))

clubs_list_df = fifa_df[['Club']].drop_duplicates(subset='Club')
clubs_list_df

# prompt: get me list of players and their attributes in Real Madrid club

barca_players = fifa_df[fifa_df['Club'] == 'FC Barcelona']
print("List of Players in FC Barcelona with their attributes:")
print(barca_players[['Name', 'Age', 'Nationality', 'Positions', 'Value','IR']])

# prompt: get me list of players and their attributes in Manchester City club

man_city_players = fifa_df[fifa_df['Club'] == 'Manchester City']
print("List of Players in Manchester City with their attributes:")
print(man_city_players[['Name', 'Age', 'Nationality', 'Positions', 'Value','IR']])

# prompt: rate the 2 clubs based on IR of the players

# Calculate the average IR for Real Madrid players
barca_avg_ir = barca_players['IR'].str.replace('★','').astype(np.int64).mean()

# Calculate the average IR for Juventus players
man_city_avg_ir = man_city_players['IR'].str.replace('★','').astype(np.int64).mean()

print(f"FC Barcelona's average IR: {barca_avg_ir:.2f}")
print(f"Manchester City's average IR: {man_city_avg_ir:.2f}")

if barca_avg_ir > man_city_avg_ir:
  print("FC Barcelona has a higher average IR, suggesting a better overall player quality.")
elif man_city_avg_ir > barca_avg_ir:
  print("Manchester City has a higher average IR, suggesting a better overall player quality.")
else:
  print("Both clubs have a similar average IR.")

# prompt: create a list of all the clubs and there average ratings based on the players IR

club_avg_ir = fifa_df.groupby('Club')['IR'].agg(lambda x: x.str.replace('★', '').astype(float).mean())
club_avg_ir = club_avg_ir.sort_values(ascending=False)
print(club_avg_ir)

club_avg_ir.head(10)

#Lets look at a random player
fifa_df2.loc[2900]

"""# **EXPLORATIONS ACHIEVED USING THE FIFA 21 DATA :-**
>
> - <i>Clustering players by Overall and Potential rating</i>
> - <i>Players Overall vs Potential Rating Distribution</i>
> - <i>Clustering players by Nationaity</i>
> - <i>Top 20 Countries With Maximum Number of Players in FIFA 21</i>
> - <i>Clustering players by International Reputation</i>
> - <i>Representation of The Distribution of International Reputation of Players in FIFA 21</i>
> - <i>Each Different Playing Positions Distribution Among Players in FIFA 21 </i>
> - <i>Plotting Players With Different Playing Positions</i>
> - <i>Top 10 Players in Each Different Playing Positions</i>
     <ol> <i>Top 10 Goalkeepers in FIFA 21</i> </ol>
     <ol> <i> Top 10 Strickers in FIFA 21</i></ol>
     <ol><i>Top 10 Center Backs in FIFA 21</i> </ol>
     <ol><i>Top 10 Left Wings in FIFA 21</i></ol>
     <ol><i>Top 10 Right Wings in FIFA 21</i></ol>
     <ol><i>Top 10 Center Defensive Midfielders in FIFA 21</i></ol>
     <ol><i>Top 10 Center Midfielders in FIFA 21</i></ol>
     <ol><i>Top 10 RIght Backs in FIFA 21</i></ol>
> - <i>Top 10 Shooters in FIFA 21</i>
> - <i>Top 10 Fastest Players in FIFA 21</i>
> - <i>Top 10 Valuable Players in FIFA 21</i>
> - <i>Distributions of Players In Different Age Groups</i>
> _ <i>Players Overall and Potential Rating vs Age in FIFA 21</i>
> - <i>Top 15 Players Key Performance Indication</i>

"""

#Clustering Players by Nationality
country_count_df = fifa_df['Nationality'].value_counts()
country_count_df

"""Top 20 Countries With Maximum Number of Players in FIFA21"""

#Lets plot Top 20 countries with maximum number of players in FIFA21
country_df = pd.DataFrame(country_count_df.head(20))
country_df.sort_values('Nationality',ascending=True).plot(kind='barh',figsize=(15,10),color='lightgreen')
plt.title('Top 20 Countries With Maximum Number of Players in FIFA21', fontsize=25)
plt.ylabel('Countries', fontsize=20)
plt.xlabel('Number of Players', fontsize=20)
plt.legend(['Number of Players']);

rep_df = fifa_df[['Name', 'IR']].sort_values('IR',ascending=False)
rep_df

rep_df.head(10)

#Plotting a pie chart to represent the distribution of international reputation of players
labels=['1','2','3','4','5']
sizes=fifa_df['IR'].value_counts()
colors=['red','green','blue','yellow','orange']
explode=[0.1,0.1,0.2,0.5,0.9]
plt.rcParams['figure.figsize']=(10,10)
plt.pie(sizes,labels=labels,colors=colors,explode=explode,shadow=True)
plt.title('International Reputation of the players in FIFA21',fontsize=20)
plt.legend()
plt.show()

#Top 10 Goalkeepers in FIFA 21
goalkeepers_df = fifa_df[fifa_df['Positions'].str.contains('GK', case=False)]
goalkeepers_df[['LongName','IR','Club','Nationality','Height_Value','Goalkeeping','Wage']].sort_values('IR',ascending=False).head(10)

#Top 10 Strickers in FIFA 21
strickers_df = fifa_df[fifa_df['Positions'].str.contains('ST', case=False)]
strickers_df[['LongName','IR','Club','Nationality','Shot Power','Preferred Foot','Wage','SHO']].sort_values('IR',ascending=False).head(10)

#Top 10 Center Backs in FIFA 21
center_backs_df = fifa_df[fifa_df['Positions'].str.contains('CB', case=False)]
center_backs_df[['LongName','IR','Club','Nationality','Defending','Preferred Foot','Wage']].sort_values('IR',ascending=False).head(10)

#Top 10 Left Wings in FIFA 21
left_wings_df = fifa_df[fifa_df['Positions'].str.contains('LW', case=False)]
left_wings_df[['LongName','IR','Club','Nationality','Dribbling','Preferred Foot','Wage']].sort_values('IR',ascending=False).head(10)

#Top 10 Right Wings in FIFA 21
right_wings_df = fifa_df[fifa_df['Positions'].str.contains('RW', case=False)]
right_wings_df[['LongName','IR','Club','Nationality','Dribbling','Preferred Foot','Wage']].sort_values('IR',ascending=False).head(10)

#Top 10 Center Defensive Midfielders in FIFA 21
center_defensive_midfielders_df = fifa_df[fifa_df['Positions'].str.contains('CDM', case=False)]
center_defensive_midfielders_df[['LongName','IR','Club','Nationality','Dribbling','Defending','Wage']].sort_values('IR',ascending=False).head(10)

# prompt: Top 10 Shooters in FIFA 21

top_shooters_df = fifa_df[['LongName', 'Club', 'Nationality', 'Shot Power']].sort_values('Shot Power', ascending=False).head(10)
print("Top 10 Shooters in FIFA 21:")
print(top_shooters_df)

#Top 10 Fastest Players in FIFA 21
fastest_players_df = fifa_df[['Name', 'Club', 'Nationality', 'Sprint Speed']].sort_values('Sprint Speed', ascending=False).head(10)
print("Top 10 Fastest Players in FIFA 21:")
print(fastest_players_df)

#Top 10 Valuable Players in FIFA 21
valuable_players_df = fifa_df[['Name', 'Club', 'Nationality', 'Value']].sort_values('Value', ascending=False).head(10)
print("Top 10 Valuable Players in FIFA 21:")
print(valuable_players_df)

# prompt: Distributions of Players In Different Age Groups _ Players Overall and Potential Rating vs Age in FIFA 21

import matplotlib.pyplot as plt
# Create a histogram of player ages
plt.figure(figsize=(10, 6))
plt.hist(fifa_df['Age'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Age')
plt.ylabel('Number of Players')
plt.title('Distribution of Players in Different Age Groups')
plt.show()

# Create a scatter plot of Overall vs Age and Potential vs Age
plt.figure(figsize=(12, 6))

# Overall vs Age
plt.subplot(1, 2, 1)
plt.scatter(fifa_df['Age'], fifa_df['Total Stats'], alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Overall Rating')
plt.title('Overall Rating vs Age')

# Potential vs Age
plt.subplot(1, 2, 2)
plt.scatter(fifa_df['Age'], fifa_df['Base Stats'], alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Potential Rating')
plt.title('Potential Rating vs Age')

plt.tight_layout()
plt.show()

# prompt: Top 15 Players Key Performance Indication

# Top 15 Players Key Performance Indication
top_15_players = fifa_df.sort_values('Total Stats', ascending=False).head(15)
top_15_players[['Name', 'Club', 'Nationality', 'Total Stats', 'Base Stats', 'Positions', 'Age','Value']]